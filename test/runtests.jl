
using ConicBenchmarkUtilities
using Test
using MathOptInterface
const MOI = MathOptInterface
const MOIU = MathOptInterface.Utilities
# using SCS
using Hypatia

# MOIU.@model(SCSModelData, (MOI.ZeroOne, MOI.Integer), (),
#     (MOI.Zeros, MOI.Reals, MOI.Nonnegatives, MOI.Nonpositives,
#         MOI.SecondOrderCone, MOI.RotatedSecondOrderCone, MOI.ExponentialCone,
#         MOI.DualExponentialCone, MOI.PowerCone, MOI.DualPowerCone,
#         MOI.PositiveSemidefiniteConeTriangle,),
#     (), (), (), (MOI.VectorOfVariables,), (MOI.VectorAffineFunction,)
#     )

MOIU.@model(HypatiaModelData,
    (),
    (
        MOI.EqualTo, MOI.GreaterThan, MOI.LessThan, MOI.Interval,
    ),
    (
        MOI.Zeros, MOI.Nonnegatives, MOI.Nonpositives,
        MOI.SecondOrderCone, MOI.RotatedSecondOrderCone,
        MOI.ExponentialCone, MOI.PowerCone, MOI.GeometricMeanCone,
        MOI.PositiveSemidefiniteConeTriangle,
        MOI.LogDetConeTriangle,
    ),
    (),
    (MOI.SingleVariable,),
    (MOI.ScalarAffineFunction,),
    (MOI.VectorOfVariables,),
    (MOI.VectorAffineFunction,),
    )


# optimizer = MOIU.CachingOptimizer(SCSModelData{Float64}(), SCS.Optimizer(eps=1e-6, verbose=true))
optimizer = MOIU.CachingOptimizer(HypatiaModelData{Float64}(), Hypatia.Optimizer(verbose=true))


@testset "ConicBenchmarkUtilities tests" begin

# CBF data input/output tests
@testset "read/write CBF $filename" for filename in ("example1", "example3", "example4", "psdvaronly")
    dat = readcbfdata(filename * ".cbf")
    if startswith(filename, "example")
        comment = "# Example C.$(last(filename)) from the CBF documentation version 2"
    else
        comment = "# Generated by ConicBenchmarkUtilities.jl"
    end
    writecbfdata("example_out.cbf", dat, comment)
    @test strip(read(filename * ".cbf", String)) == strip(read("example_out.cbf", String))
    rm("example_out.cbf")

    # TODO delete
    # println("\n\n\n")
    @show filename
    MOI.empty!(optimizer)
    cbftomoi!(optimizer, dat)
    # @show optimizer
    MOI.optimize!(optimizer)
    (x, X) = moitocbf_solution(dat, optimizer)
    @show x
    @show X
    println()
    # println(optimizer.optimizer.c)
    # println(optimizer.optimizer.A)
    # println(optimizer.optimizer.b)
    # println(optimizer.optimizer.G)
    # println(optimizer.optimizer.h)
    # println(optimizer.optimizer.cone)
    # println(optimizer.optimizer.x)
end

# MathOptInterface conversion tests


# TODO use MOI conic tests: write then read CBF, convert to MOI, then solve and run the optimizer and result checks



end
